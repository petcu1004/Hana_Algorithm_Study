// 백준_골드4_17404번_DP_RGB거리2

/*"
풀이>
	점화식을 어떻게 도출해야 되는지 너무 막막했다.
	처음에 시도한 방법은 dp의 자료형을 pair<int,int>로 하여 첫번째항에 뭘 선택했는지 기억하도록 하였다.
	But, 이 방법은 모든 경우의 수를 확인하여 계산하지 못한다는걸 깨닳앗다.

	결국, 참고하여 풀이하였고 모든 경우를 생각하여 풀이하기 위해서는
	첫번째 수를 선택하는 경우마다 dp를 구성하여야 한다는 것을 배웠다.

	점화식>
		1. 1번집이 R이고 마지막집이 R일때 최소비용

		2. 1번집이 R이고 마지막집이 G일때 최소비용

		3. 1번집이 R이고 마지막집이 B일때 최소비용

		4. 1번집이 G이고 마지막집이 R일때 최소비용

		5. 1번집이 G이고 마지막집이 G일때 최소비용

		6. 1번집이 G이고 마지막집이 B일때 최소비용

		7. 1번집이 B이고 마지막집이 R일때 최소비용

		8. 1번집이 B이고 마지막집이 G일때 최소비용

		9. 1번집이 B이고 마지막집이 B일때 최소비용

		위의 경우 중 1, 5, 9 번을 제외한 나머지를 전부 비교하여 최소값을 찾으면 되는 문제였다.


*/


#include<iostream>
#include<algorithm>
#define MAX 1000001;

using namespace std;

int arr[1001][3];


int main() {

	int N;
	int sol = MAX;

	cin >> N;

	for (int i = 1; i <= N; i++) {
		cin >> arr[i][0] >> arr[i][1] >> arr[i][2];
	}

	for (int color = 0; color < 3; color++) {
		//cout << "========== " << color << "번째 ==========" << '\n';
		int dp[1001][3] = { 0, };
		for (int i = 0; i < 3; i++) {
			if (i == color)
				dp[1][i] = arr[1][i];
			else
				dp[1][i] = MAX;

			//cout << "dp[1][" << i << "] = " << dp[1][i] << '\n';
		}

		
		for (int i = 2; i <= N; i++) {
			dp[i][0] = min(dp[i-1][1], dp[i-1][2]) + arr[i][0];
			dp[i][1] = min(dp[i-1][0], dp[i-1][2]) + arr[i][1];
			dp[i][2] = min(dp[i-1][0], dp[i-1][1]) + arr[i][2];

			/*cout << "dp[" << i << "][0] = " << dp[i][0] << '\n';
			cout << "dp[" << i << "][1] = " << dp[i][1] << '\n';
			cout << "dp[" << i << "][2] = " << dp[i][2] << '\n';*/
		}
		for (int i = 0; i < 3; i++) {
			if (color != i) {
				sol = min(sol, dp[N][i]);
			}
		}
	}
	cout << sol;

	return 0;
}
