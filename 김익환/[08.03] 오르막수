// 백준_실버1_11057번_오르막수

/*
풀이>
	점화식 : dp[i][j] = dp[i-1][0] + dp[i-1][1] + ... + dp[i-1][j-1] + dp[i-1][j]; (i > 1 일때)

	계속 더하면 수의 크기가 너무 커져서 메모리가 기하급수적으로 커지게 된다.

	문제에서 최종 답을 10007로 나눈 값을 출력하라고 했다

	이는 결국 10007을 넘을경우 10007을 빼는 계산과 같기에 
	
	풀이 중간과정에서 수시로 10007로 나누어도 결과값은 같으므로

	dp[i][j]를 구할때마다 10007로 나머지 계산을 해주어 메모리를 관리했다.

*/

#include<iostream>

using namespace std;

int N;
int dp[1001][10] = { 0, };
int sol = 0;

int main() {	

	cin >> N;

	for (int i = 0; i < 10; i++) {
		dp[1][i] = 1;
	}

	for (int i = 2; i <= N; i++) {
		for (int j = 0; j <= 9; j++) {
			for (int t = 0; t <= j; t++) {
				dp[i][j] += dp[i - 1][t];
			}
			dp[i][j] %= 10007;
		}
	}

	for (int i = 0; i < 10; i++) {
		sol = sol + dp[N][i];
	}

	//cout << sol << '\n';
	cout << sol%10007;


	return 0;
}
