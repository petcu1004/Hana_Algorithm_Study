// 백준_골드5_2225번_DP_합분해

/*
문제>
	0부터 N까지의 정수 K개를 더해서 그 합이 N이 되는 경우의 수를 구하는 문제

풀이>
	0~N까지의 수 중 K개를 더해 그합이 N이 되는 경우의 수를 구해라.

	점화식 : dp[k][n] = dp[k-1][1] + ... + dp[k-1][n];

후기>
	어려웠다.. 점화식을 찾는 방법을 떠올리는데 실패해서 
	이 문제는 결국 풀이를 참고해 풀었다.
	다시 풀어봐야할 문제이다.

*/


#include<iostream>

using namespace std;


int main() {

	int N, K;
	long long dp[201][201] = { 0, };

	cin >> N >> K;

	// 수 1개를 사용해서 해당 수(i)를 만들 수 있는 경우의 수
	for (int i = 0; i <= N; i++) {
		dp[1][i] = 1;
	}

	// 수 k개의 합이
	for (int k = 2; k <= K; k++) {
		// n이 되는
		for (int n = 0; n <= N; n++) {
			// 모든 경우의 수를 찾는다.
			for (int i = 0; i <= n; i++) {
				dp[k][n] += dp[k - 1][i];
			}

			dp[k][n] %= 1000000000;
		}
	}

	cout << dp[K][N];


	return 0;
}
