// 백준_실버2_15988번_1,2,3더하기3

/*
풀이>
	점화식 : dp[i][1] = dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][3]
			 dp[i][2] = dp[i - 2][1] + dp[i - 2][2] + dp[i - 2][3]
			 dp[i][3] = dp[i - 3][1] + dp[i - 3][2] + dp[i - 3][3]

			 => dp2[i] = dp2[i-1] + dp2[i-2] + dp2[i-3] 이 도출된다.

			 첫번째 점화식을 도출할 줄 알아야 dp를 이해해서 풀 수 있다.

*/

#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

long long dp[1000001][4];

int main() {

	int T;
	int n;
	int max_n = 0;
	vector<int> v;

	cin >> T;

	for (int i = 0; i < T; i++) {
		cin >> n;
		v.push_back(n);
		max_n = max(max_n, n);
	}

	dp[1][1] = 1;

	dp[2][1] = 1;
	dp[2][2] = 1;

	dp[3][1] = 2;
	dp[3][2] = 1;
	dp[3][3] = 1;

	for (int i = 4; i <= max_n; i++) {
		dp[i][1] = (dp[i-1][1] + dp[i - 1][2] + dp[i - 1][3]) % 1000000009;
		dp[i][2] = (dp[i - 2][1] + dp[i-2][2] + dp[i - 2][3]) % 1000000009;
		dp[i][3] = (dp[i - 3][1] + dp[i - 3][2] + dp[i-3][3]) % 1000000009;
	}

	for (int i = 0; i < v.size(); i++) {
		cout << (dp[v[i]][1] + dp[v[i]][2] + dp[v[i]][3]) % 1000000009 << '\n';
	}

	return 0;
}
